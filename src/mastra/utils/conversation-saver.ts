import { writeFileSync, mkdirSync } from 'fs';
import { join } from 'path';
import type { MBTIType, DiscussionTurn, ComprehensiveQualityReport } from '../types/mbti-types';

/**
 * 議論会話データ
 */
export interface ConversationData {
  topic: string;
  participants: MBTIType[];
  startTime: Date;
  endTime: Date;
  turns: DiscussionTurn[];
  qualityReport: ComprehensiveQualityReport;
  metadata: {
    participantCount: number;
    totalTurns: number;
    enabledFeatures: {
      realtimeOptimization: boolean;
      graphOptimization: boolean;
    };
  };
}

/**
 * 安全なファイル名を生成
 */
function sanitizeFileName(input: string): string {
  return input
    .replace(/[^\w\s-]/g, '')
    .replace(/\s+/g, '_')
    .substring(0, 50);
}

/**
 * 時間を読みやすい形式でフォーマット
 */
function formatTime(date: Date): string {
  return date.toLocaleString('ja-JP', {
    year: 'numeric',
    month: '2-digit',
    day: '2-digit',
    hour: '2-digit',
    minute: '2-digit',
    second: '2-digit'
  });
}

/**
 * 議論時間を計算
 */
function calculateDuration(start: Date, end: Date): string {
  const diffMs = end.getTime() - start.getTime();
  const diffSec = Math.round(diffMs / 1000);
  const minutes = Math.floor(diffSec / 60);
  const seconds = diffSec % 60;
  return `${minutes}分${seconds}秒`;
}

/**
 * 会話をMarkdown形式で保存
 */
export function saveConversationAsMarkdown(
  data: ConversationData,
  outputDir: string = './conversations'
): string {
  // 出力ディレクトリ作成
  try {
    mkdirSync(outputDir, { recursive: true });
  } catch (error) {
    console.warn(`Directory creation warning: ${error}`);
  }

  // ファイル名生成
  const timestamp = data.startTime.toISOString().slice(0, 19).replace(/[:-]/g, '');
  const topicSafe = sanitizeFileName(data.topic);
  const fileName = `discussion_${timestamp}_${topicSafe}.md`;
  const filePath = join(outputDir, fileName);

  // Markdownコンテンツ生成
  const content = generateMarkdownContent(data);

  // ファイル保存
  try {
    writeFileSync(filePath, content, 'utf8');
    return filePath;
  } catch (error) {
    throw new Error(`Failed to save conversation: ${error}`);
  }
}

/**
 * Markdownコンテンツ生成
 */
function generateMarkdownContent(data: ConversationData): string {
  const { topic, participants, startTime, endTime, turns, qualityReport, metadata } = data;
  
  return `# MBTI Multi-Agent Discussion Record

## 📋 **議論概要**

- **トピック**: ${topic}
- **開始時刻**: ${formatTime(startTime)}
- **終了時刻**: ${formatTime(endTime)}
- **議論時間**: ${calculateDuration(startTime, endTime)}
- **参加者数**: ${metadata.participantCount}人
- **総発言数**: ${metadata.totalTurns}回

## 👥 **参加エージェント**

${participants.map(type => `- **${type}**: ${getAgentDescription(type)}`).join('\n')}

## ⚙️ **システム設定**

- **リアルタイム最適化**: ${metadata.enabledFeatures.realtimeOptimization ? '✅ ON' : '❌ OFF'}
- **グラフ最適化**: ${metadata.enabledFeatures.graphOptimization ? '✅ ON' : '❌ OFF'}

## 💬 **議論内容**

${turns.map((turn, index) => formatTurn(turn, index + 1)).join('\n\n')}

## 📊 **品質評価結果**

### 🏆 **総合評価**: ${qualityReport.overallScore?.toFixed(1)}% (${qualityReport.grade || 'N/A'})

### 📈 **7次元品質評価**
${formatQualityMetrics(qualityReport)}

### 📋 **詳細メトリクス**
${formatDetailedMetrics(qualityReport)}

### ⚡ **リアルタイム最適化**
- **実行回数**: ${qualityReport.optimizationResults?.executionCount || 0}回
- **品質改善度**: ${qualityReport.optimizationResults?.improvementPercentage?.toFixed(1) || 'N/A'}%

## 🎯 **議論分析**

### 💪 **強み**
${(qualityReport.strengths || []).map(s => `- ${s}`).join('\n')}

### 🔧 **改善点**
${(qualityReport.improvements || []).map(i => `- ${i}`).join('\n')}

---

*Generated by MBTI Multi-Agent Discussion System (M-ADS) Phase 2*  
*Date: ${formatTime(new Date())}*
`;
}

/**
 * 発言をフォーマット
 */
function formatTurn(turn: DiscussionTurn, turnNumber: number): string {
  const timestamp = turn.timestamp ? formatTime(new Date(turn.timestamp)) : '';
  const weight = turn.weight !== undefined ? ` (重み: ${turn.weight.toFixed(2)})` : '';
  const quality = turn.qualityMetrics ? ` | 品質: ${turn.qualityMetrics.overallQuality?.toFixed(1)}%` : '';
  
  return `### Turn ${turnNumber}: ${turn.agentType}${weight}
*${timestamp}*

${turn.message}
${quality ? `\n*${quality}*` : ''}`;
}

/**
 * エージェント説明を取得
 */
function getAgentDescription(type: MBTIType): string {
  const descriptions: Record<MBTIType, string> = {
    'INTJ': 'Architect - 戦略的思考家',
    'INTP': 'Thinker - 論理的分析者',
    'ENTJ': 'Commander - 指揮官型リーダー',
    'ENTP': 'Debater - 討論者・発明家',
    'INFJ': 'Advocate - 提唱者・理想主義者',
    'INFP': 'Mediator - 仲介者・価値観重視',
    'ENFJ': 'Protagonist - 主人公・協調型',
    'ENFP': 'Campaigner - 運動家・情熱家',
    'ISTJ': 'Inspector - 管理者・責任感',
    'ISFJ': 'Protector - 擁護者・思いやり',
    'ESTJ': 'Executive - 幹部・効率重視',
    'ESFJ': 'Consul - 領事・調和重視',
    'ISTP': 'Virtuoso - 巨匠・実用主義',
    'ISFP': 'Adventurer - 冒険家・芸術家',
    'ESTP': 'Entrepreneur - 起業家・行動派',
    'ESFP': 'Entertainer - エンターテイナー・楽天家'
  };
  return descriptions[type] || type;
}

/**
 * 品質メトリクスをフォーマット
 */
function formatQualityMetrics(report: ComprehensiveQualityReport): string {
  const metrics = [
    { name: 'Performance (パフォーマンス)', value: report.performanceScore },
    { name: 'Psychological (心理的適合性)', value: report.psychologicalScore },
    { name: 'External Alignment (外部整合性)', value: report.externalAlignmentScore },
    { name: 'Internal Consistency (内部一貫性)', value: report.internalConsistencyScore },
    { name: 'Social Decision-making (社会的意思決定)', value: report.socialDecisionScore },
    { name: 'Content Quality (コンテンツ品質)', value: report.contentQualityScore },
    { name: 'Ethics (倫理性)', value: report.ethicsScore }
  ];

  return metrics
    .filter(m => m.value !== undefined)
    .map(m => `- **${m.name}**: ${(m.value! * 100).toFixed(1)}%`)
    .join('\n');
}

/**
 * 詳細メトリクスをフォーマット
 */
function formatDetailedMetrics(report: ComprehensiveQualityReport): string {
  const metrics = [
    { name: '多様性スコア', value: report.diversityScore },
    { name: '一貫性スコア', value: report.consistencyScore },
    { name: '収束効率', value: report.convergenceEfficiency },
    { name: 'MBTI整合性', value: report.mbtiAlignmentScore },
    { name: '相互作用品質', value: report.interactionQuality },
    { name: '論証品質', value: report.argumentQuality },
    { name: '参加バランス', value: report.participationBalance },
    { name: '解決率', value: report.resolutionRate }
  ];

  return metrics
    .filter(m => m.value !== undefined)
    .map(m => `- **${m.name}**: ${(m.value! * 100).toFixed(1)}%`)
    .join('\n');
}

/**
 * JSON形式で会話を保存
 */
export function saveConversationAsJson(
  data: ConversationData,
  outputDir: string = './conversations'
): string {
  // 出力ディレクトリ作成
  try {
    mkdirSync(outputDir, { recursive: true });
  } catch (error) {
    console.warn(`Directory creation warning: ${error}`);
  }

  // ファイル名生成
  const timestamp = data.startTime.toISOString().slice(0, 19).replace(/[:-]/g, '');
  const topicSafe = sanitizeFileName(data.topic);
  const fileName = `discussion_${timestamp}_${topicSafe}.json`;
  const filePath = join(outputDir, fileName);

  // JSON保存
  try {
    const jsonContent = JSON.stringify(data, null, 2);
    writeFileSync(filePath, jsonContent, 'utf8');
    return filePath;
  } catch (error) {
    throw new Error(`Failed to save conversation as JSON: ${error}`);
  }
} 